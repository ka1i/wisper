# This is a basic workflow to help you get started with Actions

name: Build Linux Kernel CI

# Controls when the workflow will run
on:
  workflow_dispatch:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: download kernel
        run: |
          wget -O linux.tar.xz https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.14.5.tar.xz
          wget https://raw.githubusercontent.com/apinske/simpleos/master/macos/config-linux-x86_64
          wget https://raw.githubusercontent.com/apinske/simpleos/master/macos/linux-x86_64.patch
          
      - name: unzip kernel
        run: |
          mkdir linux
          tar -xf linux.tar.xz -C linux --strip-components=1
          cp config-linux-x86_64 linux/.config
          patch -d linux -p1 < linux-x86_64.patch

      - name: prebuild setup
        run: |
          sudo apt update && sudo apt upgrade
          sudo apt install -y clang-12 lld-12 llvm-12 bison build-essential make cmake libelf-dev libncurses-dev libssl-dev
          sudo ln -sf /usr/lib/llvm-12/bin/clang /usr/bin/clang
          sudo ln -sf /usr/lib/llvm-12/bin/ld.lld /usr/bin/ld.lld
          sudo ln -sf /usr/lib/llvm-12/bin/llvm-* /usr/bin
          
      - name: build kernel
        run: cd linux && make CC=clang LLVM=1 LLVM_IAS=1 -j2 $*
        
      - name: env
        run: |
            echo "RELEASE=vmlinuz.tar.gz" >> $GITHUB_ENV
            echo "VERSION="$(cat .version) >> $GITHUB_ENV
            echo "TAGS="$(git rev-parse --short HEAD) >> $GITHUB_ENV

      - name: Gzip
        run: tar -czvf ${{ env.RELEASE }} -C./linux/arch/x86/boot/ bzImage
      
      - name: Changelog
        uses: glennawatson/ChangeLog@v1
        id: changelog
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: ${{ env.VERSION }}-${{ env.TAGS }}
            release_name: wispeeer:${{ env.VERSION }}
            body: |
                ${{ steps.Changelog.outputs.changelog }}
            draft: false
            prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ./${{ env.RELEASE }}
            asset_name: ${{ env.RELEASE }}
            asset_content_type: application/gzip
